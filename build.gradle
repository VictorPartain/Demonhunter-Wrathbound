plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url = 'https://maven.kosmx.dev/' }
	maven { url = 'https://maven.shedaniel.me/' }
	maven { url = 'https://jitpack.io' }
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven {
		url = "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	// The Maven with the mods source
	maven {url 'https://maven.azuredoom.com/mods'}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
	include(implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"))
	annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
	implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")

	modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim_version}")
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	//modImplementation(files("run/mods/dev/spell_engine-${project.spell_engine_version}.jar"))
	modImplementation("maven.modrinth:spell-engine:${project.spell_engine_version}")
	//modImplementation(files("run/mods/dev/more_rpg_classes-${project.more_rpg_classes_version}.jar"))
	modImplementation("maven.modrinth:more-rpg-classes:${project.more_rpg_classes_version}")

	modImplementation("maven.modrinth:wizards:${project.wizards_version}")

	modImplementation("dev.emi:trinkets:${project.trinkets_version}")
	modImplementation("maven.modrinth:spell-power:${project.spell_power_version}-fabric")
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-rc.4")))
	modImplementation("mod.azure.azurelibarmor:azurelibarmor-fabric-${project.azure_mc_version}:${project.azure_lib_version}")
	include(modImplementation("maven.modrinth:structure-pool-api:${project.structure_pool_api_version}"))
	modImplementation("maven.modrinth:runes:${project.runes_version}")
}

processResources {
	processResources {
		inputs.properties([
				"version": project.version,
				"minecraft_compat_version": project.minecraft_compat_version
		])

		filesMatching("fabric.mod.json") {
			expand([
					"version": project.version,
					"minecraft_compat_version": project.minecraft_compat_version
			])
		}
	}

}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
	sourceSets {
		main {
			java {
				srcDirs += ["src/main/generated"]
			}
			resources {
				srcDirs += ["src/main/generated"]
			}
		}
	}

}